for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
print('')
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
print('')
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('mean = ' ,mean(t(kfold[i,c(5:54)])))
cat('mean = ' ,sd(t(kfold[i,c(5:54)])))
print('')
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('mean = ' ,mean(t(kfold[i,c(5:54)])),' ')
cat('sd = ' ,sd(t(kfold[i,c(5:54)])))
print('')
}
true_edge <- function(theta){
numOfDims <- ncol(theta)
theta <- data.frame(theta)
tf <- data.frame(lapply(theta, function(x) {x!=0}))
colnames(tf) <- seq(numOfDims)
return(tf)
}
confusion_matrix <- function(estimate_edge, trueEdge){
numOfDims <- nrow(estimate_edge)
confusion <- list(TP = 0,FP = 0,FN = 0,TN = 0,TP_rate = 0,FP_rate = 0)
for (i in seq(numOfDims-1)){
for (j in seq(numOfDims)[seq(numOfDims)>i]){
if (trueEdge[i,j] == TRUE){
if (estimate_edge[i,j] == TRUE & estimate_edge[j,i] == TRUE){
confusion$TP <- confusion$TP + 1
} else {
confusion$FN <- confusion$FN + 1
}
} else {
if (estimate_edge[i,j] == TRUE & estimate_edge[j,i] == TRUE){
confusion$FP <- confusion$FP + 1
} else {
confusion$TN <- confusion$TN + 1
}
}
}
}
confusion$TP_rate <- confusion$TP/(confusion$TP + confusion$FN)
confusion$FP_rate <- confusion$FP/(confusion$FP + confusion$TN)
return(confusion)
}
library(glasso)
library(qgraph)
p <- c(rep(20,9), rep(50,9), rep(100,6))
n <- c(rep(c(rep(100,3),rep(10000,3), rep(10000,3),2),rep(1000,3),rep(10000,3))
)
n <- c((c(rep(100,3),rep(10000,3), rep(10000,3)),2),rep(1000,3),rep(10000,3))
n <- c((rep(rep(100,3),rep(10000,3), rep(10000,3)),2),rep(1000,3),rep(10000,3))
n <- c(rep(rep(100,3),rep(10000,3), rep(10000,3),2),rep(1000,3),rep(10000,3))
n <- c(rep(c(rep(100,3),rep(10000,3), rep(10000,3)),2),rep(1000,3),rep(10000,3))
n
n <- c(rep(c(rep(100,3),rep(1000,3), rep(10000,3)),2),rep(1000,3),rep(10000,3))
n
rates <- rep(c("TPR", "FPR","MCE"), 8)
optRho <- c(rep(0.1692,3),rep(0.0415,3),rep(0.0115,2), rep(0.2054,3),rep(0.0465,3),rep(0.0121,3),rep(0.0480,3),rep(0.0129,3))
optRho <- c(rep(0.1692,3),rep(0.0415,3),rep(0.0115,3), rep(0.2054,3),rep(0.0465,3),rep(0.0121,3),rep(0.0480,3),rep(0.0129,3))
for(i in 5:54){
ratedf[,i] <- NA
}
ratedf <- data.frame(p = p, n = n, optimalrates = rates, optRho = optRho)
ratedf
for(i in 5:54){
ratedf[,i] <- NA
}
ratedf
for(i in 1:8){
pi <- ratedf$p[3*i]
ni <- ratedf$n[3*i]
rhoi <- ratedf$optRho[3*i]
for(j in 1:50){
sampleData <- simulation(p = pi, n = ni)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, rhoi)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
MCE <- (cm$FP + cm$FN)/(cm$FP + cm$FN + cm$TP + cm$TN)
ratedf[3*i-2,j+4] <- cm$TP_rate
ratedf[3*i-1,j+4] <- cm$FP_rate
ratedf[3*i,j+4] <- MCE
}
}
simulation <- function(p, n){
#a generate the lower triangle part of the pxp matrix with 10% to be 0.5 and 90% to be 0.
a <- rbinom(n = p * (p - 1) / 2 , size = 1, prob = 0.1)
a[a == 1] <- 0.5
#B become the B in the sheet. Diagnal is all 0.
B <- matrix(0, p, p)
B[lower.tri(B, diag = FALSE)] <- a
B[upper.tri(B)] <- t(B)[upper.tri(B)]
#Identity matrix
I <- diag(x = 1, p, p)
#In this version, delta will start from 6 and choose as minimal as possible, usually delta = 1 will be chosen.
delta <- 6
is.positive.definite(B+delta*I, tol=0)
while (is.positive.definite(B+delta*I, tol=0)==FALSE){delta <- delta + 1}
#theta
theta = B + delta*I
#standardize the theta
standard_theta <- cov2cor(theta)
#calculate the inverse of theta
covMatrix <- solve(standard_theta)
#generate n random samples from a multivariate gaussian distribution with zero mean and the covariance matrix sigma = theta^-1.
testdata <- mvrnorm(n = n, mu = numeric(p), Sigma = covMatrix, tol = 0, empirical = FALSE, EISPACK = FALSE)
ls1 <-  list("data" = testdata, "standardtheta" = standard_theta, "theta" = theta)
return(ls1)
}
# Lin:
# This is the code for simulating multivariate gaussian distribution with zero mean and the covariance matrix sigma = theta^-1.
# After discussion, delta now is chosen as minimal as possible.
#
# Arguments:1. number_of_dimensions: the number of variables/features
#           2. how_many_sets_of_data_you_need: As the name said, the number of rows of data do you want to simulate?
#
# Retutn: 1.ls1: a list. list("data" = testdata, "standardtheta" = standard_theta, "theta" = theta)
library(MASS)
library(matrixcalc)
for(i in 1:8){
pi <- ratedf$p[3*i]
ni <- ratedf$n[3*i]
rhoi <- ratedf$optRho[3*i]
for(j in 1:50){
sampleData <- simulation(p = pi, n = ni)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, rhoi)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
MCE <- (cm$FP + cm$FN)/(cm$FP + cm$FN + cm$TP + cm$TN)
ratedf[3*i-2,j+4] <- cm$TP_rate
ratedf[3*i-1,j+4] <- cm$FP_rate
ratedf[3*i,j+4] <- MCE
}
}
ratedf
for(i in 1:24){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('mean = ' ,mean(t(kfold[i,c(5:54)])),' ')
cat('sd = ' ,sd(t(kfold[i,c(5:54)])))
print('')
}
kfold <- ratedf
for(i in 1:24){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('mean = ' ,mean(t(kfold[i,c(5:54)])),' ')
cat('sd = ' ,sd(t(kfold[i,c(5:54)])))
print('')
}
ratedf
cm
# log det theta - trace(S theta)
write.csv(ratedf,'50repeatsKfoldwithMCE.csv')
setwd("~/Documents/LSE/ST443/Project/ST443-Group-project/2.2-Graphical-lasso")
# log det theta - trace(S theta)
write.csv(ratedf,'50repeatsKfoldwithMCE.csv')
dfAll <- read.csv('50repeatsKfoldwithMCE.csv')
dfAll <- dfAll[,-1]
dfAll <- as.data.frame(t(dfAll))
dfAll
dfp20n100bp <- data.frame(rate = vector(length=150),type = vector(length=150))
dfp20n100bp
dfAll[c(5:54),c(1:3)]
as.vector(dfAll[c(5:54),c(1:3)])
library(tidyr)
rbind(dfAll[c(5:54),c(1:3)])
c(dfAll[c(5:54),c(1:3)])
dfp20n100bp$rate[1:50] <- (dfAll[c(5:54),1])
dfp20n100bp$rate[50:100] <- (dfAll[c(5:54),2])
dfp20n100bp$rate[51:100] <- (dfAll[c(5:54),2])
dfp20n100bp$rate[101:150] <- (dfAll[c(5:54),3])
dfp20n100bp
dfAll
(dfAll[c(5:54),1])
(dfAll[c(5:54),c(1:3)])
?cvind
?cbind
cbind(dfAll[c(5:54),c(1:3)])
rbind(dfAll[c(5:54),c(1:3)])
unite(dfAll[c(5:54),c(1:3)])
for(i in 1:150){
if(i < 51){
dfp20n100bp$rate[i] <- dfAll[c(5:54),c(1)])
} else if (i < 101){
dfp20n100bp$rate[i] <- dfAll[c(5:54),c(2)])
} else {
dfp20n100bp$rate[i] <- dfAll[c(5:54),c(3)])
}
}
for(i in 1:150){
if (i < 51){
dfp20n100bp$rate[i] <- dfAll[c(5:54),c(1)]
} else if (i < 101){
dfp20n100bp$rate[i] <- dfAll[c(5:54),c(2)]
} else {
dfp20n100bp$rate[i] <- dfAll[c(5:54),c(3)]
}
}
warnings()
for(i in 1:150){
if (i < 51){
dfp20n100bp$rate[i] <- dfAll[i+4,c(1)]
} else if (i < 101){
dfp20n100bp$rate[i] <- dfAll[i+4,c(2)]
} else {
dfp20n100bp$rate[i] <- dfAll[i+4,c(3)]
}
}
dfp20n100bp
for(i in 1:150){
if (i < 51){
dfp20n100bp$rate[i] <- dfAll[i+4,1]
} else if (i < 101){
dfp20n100bp$rate[i] <- dfAll[i+4,2]
} else {
dfp20n100bp$rate[i] <- dfAll[i+4,3]
}
}
dfp20n100bp
for(i in 1:150){
if (i > 100){
dfp20n100bp$rate[i] <- dfAll[i+4,3]
} else if (i > 50){
dfp20n100bp$rate[i] <- dfAll[i+4,2]
} else {
dfp20n100bp$rate[i] <- dfAll[i+4,1]
}
}
dfp20n100bp
dfAll[1+4,1]
as.numeric(dfAll[i+4,1])
as.numeric(dfAll[1+4,1])
dfAll <- read.csv('50repeatsKfoldwithMCE.csv')
dfAll <- dfAll[,-1]
dfp20n100bp <- data.frame(rate = vector(length=150),type = vector(length=150))
library(tidyr)
for(i in 1:150){
if (i > 100){
dfp20n100bp$rate[i] <- dfAll[3,i+4]
} else if (i > 50){
dfp20n100bp$rate[i] <- dfAll[2,i+4]
} else {
dfp20n100bp$rate[i] <- dfAll[1,i+4]
}
}
dfAll
for(i in 1:150){
if (i > 100){
dfp20n100bp$rate[i] <- dfAll[3,i+4-100]
} else if (i > 50){
dfp20n100bp$rate[i] <- dfAll[2,i+4-50]
} else {
dfp20n100bp$rate[i] <- dfAll[1,i+4]
}
}
dfp20n100bp
dfp20n100bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
dfp20n100bp
dfp20n100bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
library(ggplot2)
ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot() +
ggtitle("n= 100, p = 20)")
dfp20n100bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot() +
ggtitle("n= 100, p = 20)") + ylim(0,1)
ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(fill = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
p1 <- ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
p2 <- ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
grid.arrange(p1, p2, ncol = 2)
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
?grid.arrange
p2 <- ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
p3 <- ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
p4 <- ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
library(gridExtra)
grid.arrange(p1, p2, p3, p4, ncol = 2, nrow = 2)
unlist(dfAll)
dfAll
dfp20n100bp <- data.frame(rate = vector(length=150),type = vector(length=150))
dfp20n1000bp <- data.frame(rate = vector(length=150),type = vector(length=150))
dfp20n10000bp <- data.frame(rate = vector(length=150),type = vector(length=150))
dfp50n100bp <- data.frame(rate = vector(length=150),type = vector(length=150))
dfp50n1000bp <- data.frame(rate = vector(length=150),type = vector(length=150))
dfp50n10000bp <- data.frame(rate = vector(length=150),type = vector(length=150))
dfp100n1000bp <- data.frame(rate = vector(length=150),type = vector(length=150))
dfp100n10000bp <- data.frame(rate = vector(length=150),type = vector(length=150))
dfp20n1000bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
for(i in 1:150){
if (i > 100){
dfp20n1000bp$rate[i] <- dfAll[6,i+4-100]
} else if (i > 50){
dfp20n1000bp$rate[i] <- dfAll[5,i+4-50]
} else {
dfp20n1000bp$rate[i] <- dfAll[4,i+4]
}
}
dfp20n10000bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
for(i in 1:150){
if (i > 100){
dfp20n10000bp$rate[i] <- dfAll[9,i+4-100]
} else if (i > 50){
dfp20n10000bp$rate[i] <- dfAll[8,i+4-50]
} else {
dfp20n10000bp$rate[i] <- dfAll[7,i+4]
}
}
dfp50n100bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
for(i in 1:150){
if (i > 100){
dfp50n100bp$rate[i] <- dfAll[12,i+4-100]
} else if (i > 50){
dfp50n100bp$rate[i] <- dfAll[11,i+4-50]
} else {
dfp50n100bp$rate[i] <- dfAll[10,i+4]
}
}
dfp50n1000bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
for(i in 1:150){
if (i > 100){
dfp50n1000bp$rate[i] <- dfAll[15,i+4-100]
} else if (i > 50){
dfp50n1000bp$rate[i] <- dfAll[14,i+4-50]
} else {
dfp50n1000bp$rate[i] <- dfAll[13,i+4]
}
}
dfp50n10000bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
for(i in 1:150){
if (i > 100){
dfp50n10000bp$rate[i] <- dfAll[18,i+4-100]
} else if (i > 50){
dfp50n10000bp$rate[i] <- dfAll[17,i+4-50]
} else {
dfp50n10000bp$rate[i] <- dfAll[16,i+4]
}
}
dfp100n1000bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
for(i in 1:150){
if (i > 100){
dfp100n1000bp$rate[i] <- dfAll[21,i+4-100]
} else if (i > 50){
dfp100n1000bp$rate[i] <- dfAll[20,i+4-50]
} else {
dfp100n1000bp$rate[i] <- dfAll[19,i+4]
}
}
dfp100n10000bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
for(i in 1:150){
if (i > 100){
dfp100n10000bp$rate[i] <- dfAll[24,i+4-100]
} else if (i > 50){
dfp100n10000bp$rate[i] <- dfAll[23,i+4-50]
} else {
dfp100n10000bp$rate[i] <- dfAll[22,i+4]
}
}
pp20n100 <- ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
pp20n1000 <- ggplot(dfp20n1000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
pp20n10000 <- ggplot(dfp20n10000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
pp50n100 <- ggplot(dfp50n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
pp50n1000 <- ggplot(dfp50n1000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
pp50n10000 <- ggplot(dfp50n10000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
pp100n1000 <- ggplot(dfp100n1000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
pp100n10000 <- ggplot(dfp100n10000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
grid.arrange(pp20n100, pp20n1000, pp20n10000, ncol = 3)
pp20n100
View(dfp20n100bp)
View(dfp50n1000bp)
dfp20n100bp$type <- c(rep("TPR",50),rep("FPR",50),rep("MCE",50))
for(i in 1:150){
if (i > 100){
dfp20n100bp$rate[i] <- dfAll[3,i+4-100]
} else if (i > 50){
dfp20n100bp$rate[i] <- dfAll[2,i+4-50]
} else {
dfp20n100bp$rate[i] <- dfAll[1,i+4]
}
}
pp20n100 <- ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20)") + ylim(0,1)
library(gridExtra)
grid.arrange(pp20n100, pp20n1000, pp20n10000, ncol = 3)
grid.arrange(pp50n100, pp50n1000, pp50n10000, ncol = 3)
grid.arrange(pp100n1000, pp100n10000, ncol = 2)
pp20n100 <- ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pp20n1000 <- ggplot(dfp20n1000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000, p = 20") + ylim(0,1)
pp20n10000 <- ggplot(dfp20n10000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000, p = 20") + ylim(0,1)
pp50n100 <- ggplot(dfp50n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 50)") + ylim(0,1)
pp50n1000 <- ggplot(dfp50n1000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000, p = 50)") + ylim(0,1)
pp50n10000 <- ggplot(dfp50n10000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000, p = 50)") + ylim(0,1)
pp100n1000 <- ggplot(dfp100n1000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000, p = 100)") + ylim(0,1)
pp100n10000 <- ggplot(dfp100n10000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000, p = 100)") + ylim(0,1)
library(gridExtra)
grid.arrange(pp20n100, pp20n1000, pp20n10000, ncol = 3)
grid.arrange(pp20n100, pp20n1000, pp20n10000, ncol = 3)
g1 <- arrangeGrob(pp20n100, pp20n1000, pp20n10000, ncol = 3) #generates g
ggsave(file="p20bp.pdf", g1)
grid.arrange(pp50n100, pp50n1000, pp50n10000, ncol = 3)
g2 <- arrangeGrob(pp50n100, pp50n1000, pp50n10000, ncol = 3) #generates g
ggsave(file="p50bp.pdf", g2)
grid.arrange(pp100n1000, pp100n10000, ncol = 2)
g3 <- arrangeGrob(pp100n1000, pp100n10000, ncol = 2) #generates g
ggsave(file="p100bp.pdf", g3)
pp20n100 <- ggplot(dfp20n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pp20n1000 <- ggplot(dfp20n1000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000, p = 20") + ylim(0,1)
pp20n10000 <- ggplot(dfp20n10000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000, p = 20") + ylim(0,1)
pp50n100 <- ggplot(dfp50n100bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 50") + ylim(0,1)
pp50n1000 <- ggplot(dfp50n1000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000, p = 50") + ylim(0,1)
pp50n10000 <- ggplot(dfp50n10000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000, p = 50") + ylim(0,1)
pp100n1000 <- ggplot(dfp100n1000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000, p = 100") + ylim(0,1)
pp100n10000 <- ggplot(dfp100n10000bp, aes(x=type, y=rate)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000, p = 100") + ylim(0,1)
library(gridExtra)
grid.arrange(pp20n100, pp20n1000, pp20n10000, ncol = 3)
g1 <- arrangeGrob(pp20n100, pp20n1000, pp20n10000, ncol = 3) #generates g
ggsave(file="p20bp.pdf", g1)
grid.arrange(pp50n100, pp50n1000, pp50n10000, ncol = 3)
g2 <- arrangeGrob(pp50n100, pp50n1000, pp50n10000, ncol = 3) #generates g
ggsave(file="p50bp.pdf", g2)
grid.arrange(pp100n1000, pp100n10000, ncol = 2)
g3 <- arrangeGrob(pp100n1000, pp100n10000, ncol = 2) #generates g
ggsave(file="p100bp.pdf", g3)
write.csv(dfp20n100bp, file = 'dfp20n100bp.csv')
write.csv(dfp20n1000bp, file = 'dfp20n1000bp.csv')
write.csv(dfp20n10000bp, file = 'dfp20n10000bp.csv')
write.csv(dfp50n100bp, file = 'dfp50n100bp.csv')
write.csv(dfp50n1000bp, file = 'dfp50n1000bp.csv')
write.csv(dfp50n10000bp, file = 'dfp50n10000bp.csv')
write.csv(dfp100n1000bp, file = 'dfp100n1000bp.csv')
write.csv(dfp100n10000bp, file = 'dfp100n10000bp.csv')
