# Arguments:1. number_of_dimensions: the number of variables/features
#           2. how_many_sets_of_data_you_need: As the name said, the number of rows of data do you want to simulate?
#
# Retutn: 1.ls1: a list. list("data" = testdata, "standardtheta" = standard_theta, "theta" = theta)
library(MASS)
library(matrixcalc)
simulation <- function(p, n){
#a generate the lower triangle part of the pxp matrix with 10% to be 0.5 and 90% to be 0.
a <- rbinom(n = p * (p - 1) / 2 , size = 1, prob = 0.1)
a[a == 1] <- 0.5
#B become the B in the sheet. Diagnal is all 0.
B <- matrix(0, p, p)
B[lower.tri(B, diag = FALSE)] <- a
B[upper.tri(B)] <- t(B)[upper.tri(B)]
#Identity matrix
I <- diag(x = 1, p, p)
#In this version, delta will start from 6 and choose as minimal as possible, usually delta = 1 will be chosen.
delta <- 6
is.positive.definite(B+delta*I, tol=0)
while (is.positive.definite(B+delta*I, tol=0)==FALSE){delta <- delta + 1}
#theta
theta = B + delta*I
#standardize the theta
standard_theta <- cov2cor(theta)
#calculate the inverse of theta
covMatrix <- solve(standard_theta)
#generate n random samples from a multivariate gaussian distribution with zero mean and the covariance matrix sigma = theta^-1.
testdata <- mvrnorm(n = n, mu = numeric(p), Sigma = covMatrix, tol = 0, empirical = FALSE, EISPACK = FALSE)
ls1 <-  list("data" = testdata, "standardtheta" = standard_theta, "theta" = theta)
return(ls1)
}
library(glasso)
sampleData <- simulation(p = p, n = n)
dat <- sampleData$data
ll <- data.frame(rho = vector(length=500), logl1 = vector(length = 500),
logl2 = vector(length = 500), logl3 = vector(length = 500))
k <- 3
folds <- sample(rep(1:k, length=n))
for(ki in 1:3){
sTrain <- cov(dat[which(folds!=ki),])
sTest <- cov(dat[which(folds==ki),])
count <- 0
for(rhos in seq(0.001,0.5,0.001)){
count <- count + 1
glassoOutput <- glasso(sTrain, rho = rhos)
modelPrecMat <- glassoOutput$wi
ll[count,ki + 1] <- log(det(modelPrecMat)) - sum(diag(sTest %*% modelPrecMat))
ll[count, 1] <- rhos
}
}
ll
?lapply
ll$mean <- sapply(ll[,c(2:4)],mean)
ll$mean <- lapply(ll[,c(2:4)],mean)
rowMeans(ll[,c(2:4)])
ll$mean <- rowMeans(ll[,c(2:4)])
ll
determineRhoK <- function(p,n){
sampleData <- simulation(p = p, n = n)
dat <- sampleData$data
ll <- data.frame(rho = vector(length=500), logl1 = vector(length = 500),
logl2 = vector(length = 500), logl3 = vector(length = 500))
k <- 3
folds <- sample(rep(1:k, length=n))
for(ki in 1:3){
sTrain <- cov(dat[which(folds!=ki),])
sTest <- cov(dat[which(folds==ki),])
count <- 0
for(rhos in seq(0.001,0.5,0.001)){
count <- count + 1
glassoOutput <- glasso(sTrain, rho = rhos)
modelPrecMat <- glassoOutput$wi
ll[count,ki + 1] <- log(det(modelPrecMat)) - sum(diag(sTest %*% modelPrecMat))
ll[count, 1] <- rhos
}
}
ll$mean <- rowMeans(ll[,c(2:4)])
index <- which.max(ll$mean)
rhoBest <- ll$rho[index]
return(rhoBest)
}
determineRhoK <- function(p,n){
sampleData <- simulation(p = p, n = n)
dat <- sampleData$data
ll <- data.frame(rho = vector(length=300), logl1 = vector(length = 300),
logl2 = vector(length = 300), logl3 = vector(length = 300))
k <- 3
folds <- sample(rep(1:k, length=n))
for(ki in 1:3){
sTrain <- cov(dat[which(folds!=ki),])
sTest <- cov(dat[which(folds==ki),])
count <- 0
for(rhos in seq(0.001,0.3,0.001)){
count <- count + 1
glassoOutput <- glasso(sTrain, rho = rhos)
modelPrecMat <- glassoOutput$wi
ll[count,ki + 1] <- log(det(modelPrecMat)) - sum(diag(sTest %*% modelPrecMat))
ll[count, 1] <- rhos
}
}
ll$mean <- rowMeans(ll[,c(2:4)])
index <- which.max(ll$mean)
rhoBest <- ll$rho[index]
return(rhoBest)
}
library(glasso)
optRho.20.100 <- vector(length = 100)
for(i in 1:100){
optRho.20.100[i] <- determineRhoK(20,100)
print(i)
}
mean(optRho.20.100)
determineRhoK <- function(p,n){
sampleData <- simulation(p = p, n = (3/2)*n)
dat <- sampleData$data
ll <- data.frame(rho = vector(length=300), logl1 = vector(length = 300),
logl2 = vector(length = 300), logl3 = vector(length = 300))
k <- 3
folds <- sample(rep(1:k, length=n))
for(ki in 1:3){
sTrain <- cov(dat[which(folds!=ki),])
sTest <- cov(dat[which(folds==ki),])
count <- 0
for(rhos in seq(0.001,0.3,0.001)){
count <- count + 1
glassoOutput <- glasso(sTrain, rho = rhos)
modelPrecMat <- glassoOutput$wi
ll[count,ki + 1] <- log(det(modelPrecMat)) - sum(diag(sTest %*% modelPrecMat))
ll[count, 1] <- rhos
}
}
ll$mean <- rowMeans(ll[,c(2:4)])
index <- which.max(ll$mean)
rhoBest <- ll$rho[index]
return(rhoBest)
}
optRho.5.10 <- vector(length = 100)
for(i in 1:100){
optRho.5.10[i] <- determineRho(5,10)
print(i)
}
optRho.5.10 <- vector(length = 100)
for(i in 1:100){
optRho.5.10[i] <- determineRhoK(5,10)
print(i)
}
optRho.5.100 <- vector(length = 100)
for(i in 1:100){
optRho.5.100[i] <- determineRhoK(5,100)
print(i)
}
optRho.5.1000 <- vector(length = 100)
for(i in 1:100){
optRho.5.1000[i] <- determineRhoK(5,1000)
print(i)
}
optRho.5.10000 <- vector(length = 100)
for(i in 1:100){
optRho.5.10000[i] <- determineRhoK(5,10000)
print(i)
}
optRho.5.10000
optRho5 <- data.frame('5,10' = optRho.5.10, '5,100' = optRho.5.100,
'5,1000' = optRho.5.1000, '5,10000' = optRho.5.10000)
write.csv(optRho5, file = "optRho5.csv")
optRho.20.100 <- vector(length = 100)
for(i in 1:100){
optRho.20.100[i] <- determineRhoK(20,100)
print(i)
}
optRho.20.1000 <- vector(length = 100)
for(i in 1:100){
optRho.20.1000[i] <- determineRhoK(20,1000)
print(i)
}
optRho.20.10000 <- vector(length = 100)
for(i in 1:100){
optRho.20.10000[i] <- determineRhoK(20,10000)
print(i)
}
optRho20 <- data.frame('20,100' = optRho.20.100,
'20,1000' = optRho.20.1000, '20,10000' = optRho.20.10000)
write.csv(optRho20, file = 'optRho20.csv')
optRho.50.100 <- vector(length = 25)
for(i in 1:25){
optRho.50.100[i] <- determineRhoK(50,100)
print(i)
}
optRho.50.1000 <- vector(length = 25)
for(i in 1:25){
optRho.50.1000[i] <- determineRhoK(50,1000)
print(i)
}
optRho.50.10000 <- vector(length = 25)
for(i in 1:25){
optRho.50.10000[i] <- determineRhoK(50,10000)
print(i)
}
optRho50 <- data.frame('50,100' = optRho.50.100,
'50,1000' = optRho.50.1000, '50,10000' = optRho.50.10000)
write.csv(optRho50, file = 'optRho50.csv')
optRho.100.1000 <- vector(length = 25)
for(i in 1:25){
optRho.100.1000[i] <- determineRhoK(100,1000)
print(i)
}
optRho.100.10000 <- vector(length = 25)
for(i in 1:25){
optRho.100.10000[i] <- determineRhoK(100,10000)
print(i)
}
optRho100 <- data.frame('100,1000' = optRho.100.1000,
'100,10000' = optRho.100.10000)
write.csv(optRho100, file = 'optRho100.csv')
mean(optRho.20.100)
mean(optRho.20.1000)
mean(optRho.20.10000)
mean(optRho.50.100)
mean(optRho.50.1000)
mean(optRho.50.10000)
mean(optRho.100.1000)
mean(optRho.100.10000)
library(glasso)
library(qgraph)
p <- c(rep(20,6), rep(50,6), rep(100,4))
n <- c(rep(c(100, 100, 1000, 1000, 10000, 10000),2),1000,1000,10000,10000)
rates <- rep(c("TPR", "FPR"), 8)
optRho <- c(0.1692,0.1692,0.0415,0.04154,0.01154,0.01154,0.2054,0.2054,0.0465,0.0465,0.0121,0.0121,0.0480,0.0480,0.01292,0.01292)
ratedf <- data.frame(p = p, n = n, optimalrates = rates, optRho = optRho)
ratedf
for(i in 5:54){
ratedf[,i] <- NA
}
for(i in 1:8){
pi <- ratedf$p[2*i]
ni <- ratedf$n[2*i]
rhoi <- ratedf$optRho[2*i]
for(j in 1:50){
sampleData <- simulation(p = pi, n = ni)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, rhoi)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
ratedf[2*i-1,j+4] <- cm$TP_rate
ratedf[2*i,j+4] <- cm$FP_rate
}
}
confusion_matrix <- function(estimate_edge, trueEdge){
numOfDims <- nrow(estimate_edge)
confusion <- list(TP = 0,FP = 0,FN = 0,TN = 0,TP_rate = 0,FP_rate = 0)
for (i in seq(numOfDims-1)){
for (j in seq(numOfDims)[seq(numOfDims)>i]){
if (trueEdge[i,j] == TRUE){
if (estimate_edge[i,j] == TRUE & estimate_edge[j,i] == TRUE){
confusion$TP <- confusion$TP + 1
} else {
confusion$FN <- confusion$FN + 1
}
} else {
if (estimate_edge[i,j] == TRUE & estimate_edge[j,i] == TRUE){
confusion$FP <- confusion$FP + 1
} else {
confusion$TN <- confusion$TN + 1
}
}
}
}
confusion$TP_rate <- confusion$TP/(confusion$TP + confusion$FN)
confusion$FP_rate <- confusion$FP/(confusion$FP + confusion$TN)
return(confusion)
}
true_edge <- function(theta){
numOfDims <- ncol(theta)
theta <- data.frame(theta)
tf <- data.frame(lapply(theta, function(x) {x!=0}))
colnames(tf) <- seq(numOfDims)
return(tf)
}
for(i in 1:8){
pi <- ratedf$p[2*i]
ni <- ratedf$n[2*i]
rhoi <- ratedf$optRho[2*i]
for(j in 1:50){
sampleData <- simulation(p = pi, n = ni)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, rhoi)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
ratedf[2*i-1,j+4] <- cm$TP_rate
ratedf[2*i,j+4] <- cm$FP_rate
}
}
ratedf
# log det theta - trace(S theta)
write.csv(ratedf,'50repeatsKfold.csv')
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
tprfprp20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
tprfprp20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
ratedf[i,1] <- cm$TP_rate
ratedf[i,2] <- cm$FP_rate
}
tprfprp50 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
ratedf[i,1] <- cm$TP_rate
ratedf[i,2] <- cm$FP_rate
}
tprfprp20
for(i in 1:50){
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr20[i,1] <- cm$TP_rate
tprfpr20[i,2] <- cm$FP_rate
}
tprfprp20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
tprfpr20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr20[i,1] <- cm$TP_rate
tprfpr20[i,2] <- cm$FP_rate
}
tprfpr50 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr20[i,1] <- cm$TP_rate
tprfpr20[i,2] <- cm$FP_rate
}
tprfpr20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
tprfpr20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr20[i,1] <- cm$TP_rate
tprfpr20[i,2] <- cm$FP_rate
}
tprfpr50 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr50[i,1] <- cm$TP_rate
tprfpr50[i,2] <- cm$FP_rate
}
tprfpr100 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 100, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr100[i,1] <- cm$TP_rate
tprfpr100[i,2] <- cm$FP_rate
}
ebictf <- data.frame('p20' = tprfpr20, 'p50' = tprfpr50, 'p100' = tprfpr100)
ebictf
write.csv(ebictf, file = 'ebictprfpr.csv')
mean(ebictf$p20.tpr)
mean(ebictf$p20.fpr)
mean(ebictf$p50.fpr)
mean(ebictf$p100.fpr)
sd(ebictf$p100.fpr)
sd(ebictf$p20.fpr)
sd(ebictf$p50.fpr)
library(readr)
kfold <- read_csv('50repeatsKfold.csv')
kfold
kfold <- kfold[,-1]
kfold
for(i in 1:16){
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' mean(t(kfold[i,c(5:54)])))
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' mean(t(kfold[i,c(5:54)])))
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
}
kfold[1,1]
kfold <- read.csv('50repeatsKfold.csv')
kfold <- kfold[,-1]
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
print('')
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
print('')
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('mean = ' ,mean(t(kfold[i,c(5:54)])))
cat('mean = ' ,sd(t(kfold[i,c(5:54)])))
print('')
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('mean = ' ,mean(t(kfold[i,c(5:54)])),' ')
cat('sd = ' ,sd(t(kfold[i,c(5:54)])))
print('')
}
kfold <- read.csv('50repeatsKfold.csv')
setwd("~/Documents/LSE/ST443/Project/ST443-Group-project/2.2-Graphical-lasso")
kfold <- read.csv('50repeatsKfold.csv')
View(kfold)
kfold <- read.csv('50repeatsKfoldwithMCE.csv')
View(kfold)
tkfold <- data.frame(t(kfold))
View(tkfold)
View(tkfold)
p20n100 <- read.csv('dfp20n100bp.csv')
View(p20n100)
