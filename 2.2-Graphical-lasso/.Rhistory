true_edge <- function(theta){
numOfDims <- ncol(theta)
theta <- data.frame(theta)
tf <- data.frame(lapply(theta, function(x) {x!=0}))
colnames(tf) <- seq(numOfDims)
return(tf)
}
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(optMatrixEBIC,trueTet)
eestimated
estimated
trueTet
confusion_matrix(optMatrixEBIC,trueTet)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 50, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.01, gamma = 0.5, threshold = TRUE)
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.01, gamma = 0.5, threshold = TRUE)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001, threshold = TRUE)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001, threshold = TRUE)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 20, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001, threshold = TRUE)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 5, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001, threshold = TRUE)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
sampleDataEbic <- simulation(p = 5, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001, threshold = TRUE)
sampleDataEbic <- simulation(p = 5, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001, threshold = TRUE)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
sampleDataEbic <- simulation(p = 20, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001, threshold = TRUE)
sampleDataEbic <- simulation(p = 20, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001, threshold = TRUE)
sampleDataEbic <- simulation(p = 50, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001, threshold = TRUE)
sampleDataEbic <- simulation(p = 50, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001)
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 1000, lambda.min.ratio = 0.001)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 5, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 20, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
sampleDataEbic <- simulation(p = 20, n = 5000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 20, n = 2000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 20, n = 5000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 20, n = 3000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 20, n = 2000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
sampleDataEbic <- simulation(p = 20, n = 2000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 50, n = 200)
dat <- sampleDataEbic$data
sampleDataEbic <- simulation(p = 50, n = 2000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
sampleDataEbic <- simulation(p = 50, n = 3000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
sampleDataEbic <- simulation(p = 5, n = 2000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 5, n = 3000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
sampleDataEbic <- simulation(p = 5, n = 5000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 5, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 5, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.01, threshold = TRUE)
sampleDataEbic <- simulation(p = 5, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, threshold = TRUE)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
determineRho <- function(p,n){
sampleData <- simulation(p = p, n = n)
trainIndex <- sample(seq(nrow(sampleData$data)), floor(nrow(sampleData$data))/2, replace=FALSE)
train <- sampleData$data[trainIndex,]
test <- sampleData$data[-trainIndex,]
sTrain <- cov(train)
sTest <- cov(test)  # Empirical Covariance Matrix
ll <- data.frame(rho = vector(length=500), logl = vector(length = 500))
count <- 0
for(rhos in seq(0.001,0.5,0.001)){
count <- count + 1
glassoOutput <- glasso(sTrain, rho = rhos)
modelPrecMat <- glassoOutput$wi
ll$logl[count] <- log(det(modelPrecMat)) - sum(diag(sTest %*% modelPrecMat))
ll$rho[count] <- rhos
}
index <- which.max(ll$logl)
rhoBest <- ll$rho[index]
return(rhoBest)
}
optRho.50.100000 <- vector(length = 50)
for(i in 1:50){
optRho.50.100000[i] <- determineRho(50,100000)
print(i)
}
library(glasso)
optRho.50.100000 <- vector(length = 50)
for(i in 1:50){
optRho.50.100000[i] <- determineRho(50,100000)
print(i)
}
optRho.50.100000
sampleData <- simulation(p = 50, n = 10000)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, 0.0045)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
cv
cm
sampleData <- simulation(p = 50, n = 100000)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, 0.0045)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
cm
sampleDataEbic <- simulation(p = 99, n = 100)
dat <- sampleDataEbic$data
s <- cov(dat)
glasso(s, rho = 0.1)
sampleDataEbic <- simulation(p = 100, n = 100)
dat <- sampleDataEbic$data
s <- cov(dat)
glasso(s, rho = 0.1)
sampleDataEbic <- simulation(p = 100, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
glasso(s, rho = 0.1)
sampleDataEbic <- simulation(p = 100, n = 100)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
sampleDataEbic <- simulation(p = 20, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
sampleDataEbic <- simulation(p = 20, n = 5000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 20, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001)
sampleDataEbic <- simulation(p = 20, n = 1000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
for(gam in seq(0,1,100)){
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = gam)
}
seq(0,1,100)
for(gam in seq(0,1,0.01)){
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = gam)
}
setwd("~/Documents/LSE/ST443/Project/ST443-Group-project/2.2-Graphical-lasso")
read.csv('optRho5.csv')
read.csv('optRho20.csv')
determineRho <- function(p,n){
sampleData <- simulation(p = p, n = 2*n)
trainIndex <- sample(seq(nrow(sampleData$data)), floor(nrow(sampleData$data))/2, replace=FALSE)
train <- sampleData$data[trainIndex,]
test <- sampleData$data[-trainIndex,]
sTrain <- cov(train)
sTest <- cov(test)  # Empirical Covariance Matrix
ll <- data.frame(rho = vector(length=500), logl = vector(length = 500))
count <- 0
for(rhos in seq(0.001,0.5,0.001)){
count <- count + 1
glassoOutput <- glasso(sTrain, rho = rhos)
modelPrecMat <- glassoOutput$wi
ll$logl[count] <- log(det(modelPrecMat)) - sum(diag(sTest %*% modelPrecMat))
ll$rho[count] <- rhos
}
index <- which.max(ll$logl)
rhoBest <- ll$rho[index]
return(rhoBest)
}
optRho.20.10000 <- vector(length = 100)
for(i in 1:100){
optRho.20.10000[i] <- determineRho(20,10000)
print(i)
}
optRho.20.10000
mean(optRho.20.10000)
optRho.20.1000 <- vector(length = 100)
for(i in 1:100){
optRho.20.1000[i] <- determineRho(20,1000)
print(i)
}
optRho.20.1000
mean(optRho.20.1000)
tprfprlist <- data.frame(tpr = vector(length = 50),
fpr = vector(length= 50))
tprfprlist
for(j in 1:50){
sampleData <- simulation(p = 20, n = 1000)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, 0.0314)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
ratedf[j,1] <- cm$TP_rate
ratedf[j,2] <- cm$FP_rate
}
for(j in 1:50){
sampleData <- simulation(p = 20, n = 1000)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, 0.0314)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
tprfprlist[j,1] <- cm$TP_rate
tprfprlist[j,2] <- cm$FP_rate
}
tprfprlist
mean(tprfprlist$tpr)
mean(tprfprlist$fpr)
tprfprlist <- data.frame(tpr = vector(length = 50),
fpr = vector(length= 50))
for(j in 1:50){
sampleData <- simulation(p = 20, n = 10000)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, 0.00943)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
tprfprlist[j,1] <- cm$TP_rate
tprfprlist[j,2] <- cm$FP_rate
}
mean(tprfprlist$fpr)
mean(tprfprlist$tpr)
determineRho <- function(p,n){
sampleData <- simulation(p = p, n = 2*n)
trainIndex <- sample(seq(nrow(sampleData$data)), floor(nrow(sampleData$data))/2, replace=FALSE)
train <- sampleData$data[trainIndex,]
test <- sampleData$data[-trainIndex,]
print(nrow(train))
sTrain <- cov(train)
sTest <- cov(test)  # Empirical Covariance Matrix
ll <- data.frame(rho = vector(length=500), logl = vector(length = 500))
count <- 0
for(rhos in seq(0.001,0.5,0.001)){
count <- count + 1
glassoOutput <- glasso(sTrain, rho = rhos)
modelPrecMat <- glassoOutput$wi
ll$logl[count] <- log(det(modelPrecMat)) - sum(diag(sTest %*% modelPrecMat))
ll$rho[count] <- rhos
}
index <- which.max(ll$logl)
rhoBest <- ll$rho[index]
return(rhoBest)
}
optRho.20.1000 <- vector(length = 100)
for(i in 1:100){
optRho.20.1000[i] <- determineRho(20,1000)
print(i)
}
mean(optRho.20.1000)
tprfprlist <- data.frame(tpr = vector(length = 50),
fpr = vector(length= 50))
for(j in 1:50){
sampleData <- simulation(p = 20, n = 1000)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, 0.03246)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
tprfprlist[j,1] <- cm$TP_rate
tprfprlist[j,2] <- cm$FP_rate
}
tprfprlist
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
sampleDataEbic <- simulation(p = 100, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
