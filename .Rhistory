pi <- ratedf$p[2*i]
ni <- ratedf$n[2*i]
rhoi <- ratedf$optRho[2*i]
for(j in 1:50){
sampleData <- simulation(p = pi, n = ni)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, rhoi)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
ratedf[2*i-1,j+4] <- cm$TP_rate
ratedf[2*i,j+4] <- cm$FP_rate
}
}
confusion_matrix <- function(estimate_edge, trueEdge){
numOfDims <- nrow(estimate_edge)
confusion <- list(TP = 0,FP = 0,FN = 0,TN = 0,TP_rate = 0,FP_rate = 0)
for (i in seq(numOfDims-1)){
for (j in seq(numOfDims)[seq(numOfDims)>i]){
if (trueEdge[i,j] == TRUE){
if (estimate_edge[i,j] == TRUE & estimate_edge[j,i] == TRUE){
confusion$TP <- confusion$TP + 1
} else {
confusion$FN <- confusion$FN + 1
}
} else {
if (estimate_edge[i,j] == TRUE & estimate_edge[j,i] == TRUE){
confusion$FP <- confusion$FP + 1
} else {
confusion$TN <- confusion$TN + 1
}
}
}
}
confusion$TP_rate <- confusion$TP/(confusion$TP + confusion$FN)
confusion$FP_rate <- confusion$FP/(confusion$FP + confusion$TN)
return(confusion)
}
true_edge <- function(theta){
numOfDims <- ncol(theta)
theta <- data.frame(theta)
tf <- data.frame(lapply(theta, function(x) {x!=0}))
colnames(tf) <- seq(numOfDims)
return(tf)
}
for(i in 1:8){
pi <- ratedf$p[2*i]
ni <- ratedf$n[2*i]
rhoi <- ratedf$optRho[2*i]
for(j in 1:50){
sampleData <- simulation(p = pi, n = ni)
trueTheta <- sampleData$standardtheta
sAll <- cov(sampleData$data)
glassoBest <- glasso(sAll, rhoi)
true <- true_edge(trueTheta)
modelfit <- true_edge(glassoBest$wi)
cm <- confusion_matrix(modelfit,true)
ratedf[2*i-1,j+4] <- cm$TP_rate
ratedf[2*i,j+4] <- cm$FP_rate
}
}
ratedf
# log det theta - trace(S theta)
write.csv(ratedf,'50repeatsKfold.csv')
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
confusion_matrix(estimated,trueTet)
tprfprp20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
tprfprp20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
ratedf[i,1] <- cm$TP_rate
ratedf[i,2] <- cm$FP_rate
}
tprfprp50 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
ratedf[i,1] <- cm$TP_rate
ratedf[i,2] <- cm$FP_rate
}
tprfprp20
for(i in 1:50){
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr20[i,1] <- cm$TP_rate
tprfpr20[i,2] <- cm$FP_rate
}
tprfprp20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
tprfpr20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr20[i,1] <- cm$TP_rate
tprfpr20[i,2] <- cm$FP_rate
}
tprfpr50 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr20[i,1] <- cm$TP_rate
tprfpr20[i,2] <- cm$FP_rate
}
tprfpr20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
tprfpr20 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 20, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr20[i,1] <- cm$TP_rate
tprfpr20[i,2] <- cm$FP_rate
}
tprfpr50 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 50, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr50[i,1] <- cm$TP_rate
tprfpr50[i,2] <- cm$FP_rate
}
tprfpr100 <- data.frame(tpr = vector(length = 50), fpr = vector(length = 50))
for(i in 1:50){
sampleDataEbic <- simulation(p = 100, n = 10000)
dat <- sampleDataEbic$data
s <- cov(dat)
ebic <- EBICglasso(s, nrow(dat), returnAllResults = TRUE,
nlambda = 100, lambda.min.ratio = 0.001, gamma = 0)
optLambdaEBIC <- ebic$lambda[which.min(ebic$ebic)]
optMatrixEBIC <- ebic$optnet
estimated <- true_edge(optMatrixEBIC)
trueTet <- true_edge(sampleDataEbic$standardtheta)
cm <- confusion_matrix(estimated,trueTet)
#EBICgraph <- qgraph(optMatrixEBIC, layout = "spring", title = "EBIC")
tprfpr100[i,1] <- cm$TP_rate
tprfpr100[i,2] <- cm$FP_rate
}
ebictf <- data.frame('p20' = tprfpr20, 'p50' = tprfpr50, 'p100' = tprfpr100)
ebictf
write.csv(ebictf, file = 'ebictprfpr.csv')
mean(ebictf$p20.tpr)
mean(ebictf$p20.fpr)
mean(ebictf$p50.fpr)
mean(ebictf$p100.fpr)
sd(ebictf$p100.fpr)
sd(ebictf$p20.fpr)
sd(ebictf$p50.fpr)
library(readr)
kfold <- read_csv('50repeatsKfold.csv')
kfold
kfold <- kfold[,-1]
kfold
for(i in 1:16){
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' mean(t(kfold[i,c(5:54)])))
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' mean(t(kfold[i,c(5:54)])))
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
}
kfold[1,1]
kfold <- read.csv('50repeatsKfold.csv')
kfold <- kfold[,-1]
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2])
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
print('')
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('rate = ' ,mean(t(kfold[i,c(5:54)])))
print('')
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('mean = ' ,mean(t(kfold[i,c(5:54)])))
cat('mean = ' ,sd(t(kfold[i,c(5:54)])))
print('')
}
for(i in 1:16){
cat('For p = ' ,kfold[i,1],' and n = ' ,kfold[i,2],' ')
cat('mean = ' ,mean(t(kfold[i,c(5:54)])),' ')
cat('sd = ' ,sd(t(kfold[i,c(5:54)])))
print('')
}
setwd("~/Documents/LSE/ST443/Project/ST443-Group-project/2.2-Graphical-lasso")
dfBP <- read.csv('transformWen.csv')
dfBP
View(dfBP)
library(tidyverse)
View(dfBP)
dfBP <- dfBP[,-1]
View(dfBP)
dfBP <- dfBP[,-4]
View(dfBP)
pp20n100 <- ggplot(dfBP, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pp20n100
dfBP$p <- as.factor(dfBP$p)
pp20n100 <- ggplot(dfBP, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pp20n100
dfBPn100 <- select(dfBP, n = 100)
dfBPn100 <- filter(dfBP, n =- 100)
dfBPn100 <- filter(dfBP, n == 100)
pn100 <- ggplot(dfBP, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pp20n100
pn100
pn100 <- ggplot(dfBPn100, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pn100
pn100TPR <- ggplot(dfBPn100, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pn1000TPR <- ggplot(dfBPn1000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pn10000TPR <- ggplot(dfBPn10000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
dfBPn1000 <- filter(dfBP, n == 1000)
dfBPn10000 <- filter(dfBP, n == 10000)
pn100TPR <- ggplot(dfBPn100, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pn1000TPR <- ggplot(dfBPn1000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pn10000TPR <- ggplot(dfBPn10000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pn100TPR <- ggplot(dfBPn100, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pn1000TPR <- ggplot(dfBPn1000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
pn10000TPR <- ggplot(dfBPn10000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100, p = 20") + ylim(0,1)
library(gridExtra)
grid.arrange(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3)
pn100TPR <- ggplot(dfBPn100, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100") + ylim(0,1)
pn1000TPR <- ggplot(dfBPn1000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000") + ylim(0,1)
pn10000TPR <- ggplot(dfBPn10000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000") + ylim(0,1)
#FPR
pn100FPR <- ggplot(dfBPn100, aes(x=p, y=FPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100") + ylim(0,1)
pn1000FPR <- ggplot(dfBPn1000, aes(x=p, y=FPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000") + ylim(0,1)
pn10000FPR <- ggplot(dfBPn10000, aes(x=p, y=FPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000") + ylim(0,1)
#MCE
pn100MCE <- ggplot(dfBPn100, aes(x=p, y=MCE)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100") + ylim(0,1)
pn1000MCE <- ggplot(dfBPn1000, aes(x=p, y=MCE)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000") + ylim(0,1)
pn10000MCE <- ggplot(dfBPn10000, aes(x=p, y=MCE)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000") + ylim(0,1)
library(gridExtra)
grid.arrange(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3)
gTPR <- arrangeGrob(pp20n100, pp20n1000, pp20n10000, ncol = 3)
grid.arrange(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3)
grid.arrange(pn100FPR, pn1000FPR, pn10000FPR, ncol = 3)
grid.arrange(pn100MCE, pn1000MCE, pn10000MCE, ncol = 3)
grid.arrange(pn100FPR, pn1000FPR, pn10000FPR, ncol = 3)
grid.arrange(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3)
#TPR
pn100TPR <- ggplot(dfBPn100, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100") + ylim(0,1)
pn1000TPR <- ggplot(dfBPn1000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000") + ylim(0,1)
pn10000TPR <- ggplot(dfBPn10000, aes(x=p, y=TPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000") + ylim(0,1)
#FPR
pn100FPR <- ggplot(dfBPn100, aes(x=p, y=FPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100") + ylim(0,0.5)
pn1000FPR <- ggplot(dfBPn1000, aes(x=p, y=FPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000") + ylim(0,0.5)
pn10000FPR <- ggplot(dfBPn10000, aes(x=p, y=FPR)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000") + ylim(0,0.5)
#MCE
pn100MCE <- ggplot(dfBPn100, aes(x=p, y=MCE)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 100") + ylim(0,0.5)
pn1000MCE <- ggplot(dfBPn1000, aes(x=p, y=MCE)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 1000") + ylim(0,0.5)
pn10000MCE <- ggplot(dfBPn10000, aes(x=p, y=MCE)) +
geom_boxplot(color = 'blue') +
ggtitle("n= 10000") + ylim(0,0.5)
library(gridExtra)
grid.arrange(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3)
gTPR <- arrangeGrob(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3) #generates g
ggsave(file="TPRbp.pdf", gTPR)
grid.arrange(pn100FPR, pn1000FPR, pn10000FPR, ncol = 3)
gFPR <- arrangeGrob(pn100FPR, pn1000FPR, pn10000FPR, ncol = 3) #generates g
ggsave(file="FPRbp.pdf", gFPR)
grid.arrange(pn100MCE, pn1000MCE, pn10000MCE, ncol = 3)
gMCE <- arrangeGrob(pn100MCE, pn1000MCE, pn10000MCE, ncol = 3) #generates g
ggsave(file="MCEbp.pdf", gMCE)
View(dfBP)
dfAll <- read.csv('E1E2E3.csv')
setwd("~/Documents/LSE/ST443/Project/ST443-Group-project")
dfAll <- read.csv('E1E2E3.csv')
rm(list=ls())
dfAll <- read.csv('E1E2E3.csv')
dfAll
View(dfAll)
dfAll <- dfAll[,-1]
View(dfAll)
library(tidyverse)
dfAll %>% count(Estimated_E)
dfAll %>% count(method)
dfAllTPR <- filter(dfAll, method = 'cv_min' | method = 'loglikhood')
dfAllTPR <- filter(dfAll, method == 'cv_min' | method == 'loglikhood')
dfAllTPR <- filter(dfAll, method == 'cv_min', method == 'loglikhood')
dfAllTPR <- filter(dfAll, method == c('cv_min','loglikhood'))
dfAllTPR <- filter(dfAll, method == 'cv_min' | method == 'loglikhood')
dfAllFPR <- filter(dfAll, method == 'cv1se' | method == 'loglikhood')
dfAllTPRn100 <- filter(dfAllTPR, n == 100)
dfAllTPRn1000 <- filter(dfAllTPR, n == 1000)
dfAllTPRn10000 <- filter(dfAllTPR, n == 10000)
dfAllFPRn100 <- filter(dfAllFPR, n == 100)
dfAllFPRn1000 <- filter(dfAllFPR, n == 1000)
dfAllFPRn10000 <- filter(dfAllFPR, n == 10000)
pn100TPR <- ggplot(dfAllTPRn100, aes(x=method, y=TPR)) +
geom_boxplot(fill = p) +
ggtitle("n = 100") + ylim(0,1)
pn1000TPR <- ggplot(dfAllTPRn1000, aes(x=method, y=TPR)) +
geom_boxplot(color = p) +
ggtitle("n = 1000") + ylim(0,1)
pn10000TPR <- ggplot(dfAllTPRn10000, aes(x=method, y=TPR)) +
geom_boxplot(color = p) +
ggtitle("n = 10000") + ylim(0,1)
dfAllTPRn10000
View(dfAllFPRn100)
dfAll$p <- as.factor(dfAll$p)
dfAllTPR <- filter(dfAll, method == 'cv_min' | method == 'loglikhood')
dfAllFPR <- filter(dfAll, method == 'cv1se' | method == 'loglikhood')
dfAllTPRn100 <- filter(dfAllTPR, n == 100)
dfAllTPRn1000 <- filter(dfAllTPR, n == 1000)
dfAllTPRn10000 <- filter(dfAllTPR, n == 10000)
dfAllFPRn100 <- filter(dfAllFPR, n == 100)
dfAllFPRn1000 <- filter(dfAllFPR, n == 1000)
dfAllFPRn10000 <- filter(dfAllFPR, n == 10000)
#TPR
pn100TPR <- ggplot(dfAllTPRn100, aes(x=method, y=TPR)) +
geom_boxplot(fill = p) +
ggtitle("n = 100") + ylim(0,1)
#TPR
pn100TPR <- ggplot(dfAllTPRn100, aes(x=method, y=TPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 100") + ylim(0,1)
pn1000TPR <- ggplot(dfAllTPRn1000, aes(x=method, y=TPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 1000") + ylim(0,1)
pn10000TPR <- ggplot(dfAllTPRn10000, aes(x=method, y=TPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 10000") + ylim(0,1)
grid.arrange(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3)
pn100TPR <- ggplot(dfAllTPRn100, aes(x=Estimated_E, y=TPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 100") + ylim(0,1)
pn1000TPR <- ggplot(dfAllTPRn1000, aes(x=Estimated_E, y=TPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 1000") + ylim(0,1)
pn10000TPR <- ggplot(dfAllTPRn10000, aes(x=Estimated_E, y=TPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 10000") + ylim(0,1)
grid.arrange(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3)
pn100FPR <- ggplot(dfAllFPRn100, aes(x=Estimated_E, y=FPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 100") + ylim(0,0.5)
pn1000TPR <- ggplot(dfAllFPRn1000, aes(x=Estimated_E, y=FPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 1000") + ylim(0,0.5)
pn10000TPR <- ggplot(dfAllFPRn10000, aes(x=Estimated_E, y=FPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 10000") + ylim(0,0.5)
grid.arrange(pn100FPR, pn1000FPR, pn10000FPR, ncol = 3)
pn100TPR <- ggplot(dfAllTPRn100, aes(x=Estimated_E, y=TPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 100") + ylim(0,1)
pn1000TPR <- ggplot(dfAllTPRn1000, aes(x=Estimated_E, y=TPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 1000") + ylim(0,1)
pn10000TPR <- ggplot(dfAllTPRn10000, aes(x=Estimated_E, y=TPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 10000") + ylim(0,1)
#FPR
pn100FPR <- ggplot(dfAllFPRn100, aes(x=Estimated_E, y=FPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 100") + ylim(0,0.5)
pn1000FPR <- ggplot(dfAllFPRn1000, aes(x=Estimated_E, y=FPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 1000") + ylim(0,0.5)
pn10000FPR <- ggplot(dfAllFPRn10000, aes(x=Estimated_E, y=FPR)) +
geom_boxplot(aes(fill = p)) +
ggtitle("n = 10000") + ylim(0,0.5)
grid.arrange(pn100FPR, pn1000FPR, pn10000FPR, ncol = 3)
grid.arrange(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3)
gTPR <- arrangeGrob(pn100TPR, pn1000TPR, pn10000TPR, ncol = 3) #generates g
ggsave(file="TPRbpALL.pdf", gTPR)
grid.arrange(pn100FPR, pn1000FPR, pn10000FPR, ncol = 3)
gFPR <- arrangeGrob(pn100FPR, pn1000FPR, pn10000FPR, ncol = 3) #generates g
ggsave(file="FPRbpALL.pdf", gFPR)
